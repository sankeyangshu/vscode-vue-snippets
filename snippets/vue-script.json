{
  "Vue Data": {
    "prefix": "vdata",
    "body": ["data() {", "\treturn {", "\t\t${1:key}: ${2:value}", "\t}", "},"],
    "description": "Vue Component Data"
  },
  "Vue Props with Default": {
    "prefix": "vprops",
    "body": [
      "props: {",
      "\t${1:propName}: {",
      "\t\ttype: ${2:Number},",
      "\t\tdefault: ${0}",
      "\t},",
      "},"
    ],
    "description": "Vue Props with Default"
  },
  "Vue Methods": {
    "prefix": "vmethod",
    "body": ["methods: {", "\t${1:name}() {", "\t\t${0}", "\t}", "},"],
    "description": "vue method"
  },
  "Vue Computed": {
    "prefix": "vcomputed",
    "body": ["computed: {", "\t${1:name}() {", "\t\treturn this.${2:data} ${0}", "\t}", "},"],
    "description": "computed value"
  },
  "Vue Watchers": {
    "prefix": "vwatcher",
    "body": ["watch: {", "\t${1:data}(${2:newValue}, ${3:oldValue}) {", "\t\t${0}", "\t}", "},"],
    "description": "vue watcher"
  },
  "Vue Watchers with Options": {
    "prefix": "vwatcher-options",
    "body": [
      "watch: {",
      "\t${1:data}: {",
      "\t\timmediate: ${2:true},",
      "\t\tdeep: ${3:true},",
      "\t\thandler(${4:newValue}, ${5:oldValue}) {",
      "\t\t\t${0}",
      "\t\t}",
      "\t}",
      "},"
    ],
    "description": "vue watcher with options"
  },
  "Vue Filter": {
    "prefix": "vfilter",
    "body": ["filters: {", "\t${1:fnName}(${2:value}) {", "\t\treturn ${2:value}${0};", "\t}", "}"],
    "description": "vue filter"
  },
  "Vue Import into the Component": {
    "prefix": "vcomponents",
    "body": ["components: {", "\t${1:New},", "},"],
    "description": "Import one component into another, within export statement"
  },
  "Vue Emit": {
    "prefix": "vemit",
    "body": ["${1:this}.\\$emit('${2:eventName}', ${3:data})"],
    "description": "vue emit"
  },
  "Vue NextTick": {
    "prefix": "vnexttick",
    "body": ["${1:this}.\\$nextTick(() => {", "\t${0}", "});"],
    "description": "vue nextTick"
  },
  "Vue Set": {
    "prefix": "vset",
    "body": ["${1:this}.\\$set(${2:target}, ${3:key}, ${4:value})"],
    "description": "vue set"
  },
  "Vue Delete": {
    "prefix": "vdelete",
    "body": ["${1:this}.\\$delete(${2:target}, ${3:key})"],
    "description": "vue delete"
  },
  "Vue Lifecycle beforeCreate": {
    "prefix": "vbeforecreate",
    "body": ["beforeCreate () {", "\t${0};", "},"],
    "description": "beforeCreate lifecycle method"
  },
  "Vue Lifecycle created": {
    "prefix": "vcreated",
    "body": ["created () {", "\t${0};", "},"],
    "description": "created lifecycle method"
  },
  "Vue Lifecycle beforeMount": {
    "prefix": "vbeforemount",
    "body": ["beforeMount () {", "\t${0};", "},"],
    "description": "beforeMount lifecycle method"
  },
  "Vue Lifecycle mounted": {
    "prefix": "vmounted",
    "body": ["mounted () {", "\t${0};", "},"],
    "description": "mounted lifecycle method"
  },
  "Vue Lifecycle beforeUpdate": {
    "prefix": "vbeforeupdate",
    "body": ["beforeUpdate () {", "\t${0};", "},"],
    "description": "beforeUpdate lifecycle method"
  },
  "Vue Lifecycle updated": {
    "prefix": "vupdated",
    "body": ["updated () {", "\t${0};", "},"],
    "description": "updated lifecycle method"
  },
  "Vue Lifecycle beforeDestroy": {
    "prefix": "vbeforedestroy",
    "body": ["beforeDestroy () {", "\t${0};", "},"],
    "description": "beforeDestroy lifecycle method"
  },
  "Vue Lifecycle destroyed": {
    "prefix": "vdestroyed",
    "body": ["destroyed () {", "\t${0};", "},"],
    "description": "destroyed lifecycle method"
  },
  "Vue Lifecycle beforeUnmount": {
    "prefix": "vbeforeunmount",
    "body": ["beforeUnmount () {", "\t${0};", "},"],
    "description": "beforeUnmount lifecycle method"
  },
  "Vue Lifecycle Unomunt": {
    "prefix": "vunmount",
    "body": ["unmounted () {", "\t${0};", "},"],
    "description": "unmounted lifecycle method"
  },
  "Vue Composition API - Vue ref": {
    "prefix": "v3ref",
    "body": ["const ${1:name} = ref(${2:})"],
    "description": "Vue Ref"
  },
  "Vue Composition API - Reactive": {
    "prefix": "v3reactive",
    "body": ["const ${1:name} = reactive({", "\t${2:0}", "})"],
    "description": "Vue Composition api - reactive"
  },
  "Vue Composition API - Computed": {
    "prefix": "v3computed",
    "body": ["const ${1:name} = computed(() => {", "\treturn ${2:}", "})"],
    "description": "Vue Composition api - computed"
  },
  "Vue Composition API - watch - single source": {
    "prefix": "v3watch",
    "body": ["watch(() => ${1:foo}, (newValue, oldValue) => {", "\t${2}", "})"],
    "description": "Vue Composition api - watcher single source"
  },
  "Vue Composition API - watch - array": {
    "prefix": "v3watch-array",
    "body": [
      "watch([${1:foo}, ${2:bar}], ([new${1}, new${2}], [prev${1}, prev${2}]) => {",
      "\t${3}",
      "})"
    ],
    "description": "Vue Composition api - watch as array"
  },
  "Vue Composition API - watchEffect": {
    "prefix": "v3watcheffect",
    "body": ["watchEffect(() => {", "\t${1}", "})"],
    "description": "Vue Composition api - watchEffect"
  },
  "Vue Lifecycle Hooks - onBeforeMount": {
    "prefix": "v3onbeforemount",
    "body": ["onBeforeMount(() => {${1}})"],
    "description": "Vue onBeforeMount Lifecycle hook"
  },
  "Vue Lifecycle Hooks - onMounted": {
    "prefix": "v3onmounted",
    "body": ["onMounted(() => {${1}})"],
    "description": "Vue Mounted Lifecycle hook"
  },
  "Vue Lifecycle Hooks - onBeforeUpdate": {
    "prefix": "v3onbeforeupdate",
    "body": ["onBeforeUpdate(() => {${1}})"],
    "description": "Vue onBeforeUpdate Lifecycle hook"
  },
  "Vue Lifecycle Hooks - onUpdated": {
    "prefix": "v3onupdated",
    "body": ["onUpdated(() => {${1}})"],
    "description": "Vue onUpdated Lifecycle hook"
  },
  "Vue Lifecycle Hooks - onUnmounted": {
    "prefix": "v3onunmounted",
    "body": ["onUnmounted(() => {${1}})"],
    "description": "(destroyed) Vue onUnmounted Lifecycle hook"
  },
  "Vue Lifecycle Hooks - onBeforeUnmount": {
    "prefix": "v3onbeforeunmount",
    "body": ["onBeforeUnmount(() => {${1}})"],
    "description": "(beforeDestroy) Vue onBeforeUnmount Lifecycle hook"
  },
  "Vue Lifecycle Hooks - onErrorCaptured": {
    "prefix": "v3onerrorcaptured",
    "body": ["onErrorCaptured(() => {${1}})"],
    "description": "Vue onErrorCaptured Lifecycle hook"
  }
}
